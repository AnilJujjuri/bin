use std::sync::{Arc, Mutex};

use std::thread;

use std::time::Duration;

// Define the desired message IDs to filter

const DESIRED_MESSAGE_IDS: [u32; 2] = [0x100, 0x200];

// Message counters

static mut SENT_MESSAGE_COUNT: u32 = 0;

static mut RECEIVED_MESSAGE_COUNT: u32 = 0;

fn send_can_message(bus: &can::Bus, arbitration_id: u32, data: &[u8]) {

    unsafe {

        SENT_MESSAGE_COUNT += 1;

    }

    let message = can::Frame::new(arbitration_id, data.to_vec(), false, false).unwrap();

    bus.send(&message).unwrap();

    println!("Sent message: ID={}, Data={:?}", arbitration_id, data);

}

fn receive_can_messages(bus: &can::Bus, received_message_count: Arc<Mutex<u32>>) {

    loop {

        if let Ok(message) = bus.recv_timeout(Duration::from_secs(1)) {

            unsafe {

                *received_message_count.lock().unwrap() += 1;

            }

            println!("Received message: ID={}, Data={:?}", message.id(), message.data());

        } else {

            break;

        }

    }

}

fn periodic_message_sender(bus: &can::Bus) {

    // Define the periodic message details

    let periodic_message_id = 0x300;

    let periodic_message_data: [u8; 3] = [0xAA, 0xBB, 0xCC];

    let period_sec = Duration::from_secs(1);

    loop {

        send_can_message(bus, periodic_message_id, &periodic_message_data);

        thread::sleep(period_sec);

    }

}

fn main() {

    // Create a CAN bus interface with Virtual CAN

    let bus = can::Bus::new("virtual", "vcan0").unwrap();

    // Create a shared counter for received message count

    let received_message_count = Arc::new(Mutex::new(0));

    // Create and start the thread for periodic message sending

    let bus_clone = bus.clone();

    let sender_thread = thread::spawn(move || {

        periodic_message_sender(&bus_clone);

    });

    // Start receiving CAN messages

    receive_can_messages(&bus, received_message_count.clone());

    // Wait for the sender thread to finish

    sender_thread.join().unwrap();

    // Print the final message counts

    let sent_message_count;

    let received_message_count = received_message_count.lock().unwrap();

    unsafe {

        sent_message_count = SENT_MESSAGE_COUNT;

    }

    println!("Sent message count: {}", sent_message_count);

    println!("Received message count: {}", *received_message_count);

    // Properly shut down the CAN bus interface

    bus.shutdown().unwrap();

}

