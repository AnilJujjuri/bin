import can
import csv
import time
from threading import Thread
from flask import Flask, jsonify

app = Flask(__name__)
bus = None
sender_thread = None

def send_can_message(bus, message_id, message_data, csv_writer):
    message = can.Message(
        arbitration_id=message_id,
        data=message_data,
        is_extended_id=False
    )
    bus.send(message)
    print(f"Sent message: ID=0x{message_id:x}, Data={message_data}")
    csv_writer.writerows([[message_id, message_data]])


def receive_can_messages(bus):
    try:
        while True:
            message = bus.recv(timeout=1)
            if message is not None:
                print(f"Received message: ID=0x{message.arbitration_id:x}, Data={message.data}")
    except can.CanError as e:
        print(f"Exception in thread {Thread.current_thread().name}: {e}")


def periodic_message_sender(bus, csv_writer):
    for message_id in range(0xC7, 0xC9 + 1):
        message_data = [170, 187, 204]
        send_can_message(bus, message_id, message_data, csv_writer)
        time.sleep(1)


@app.route('/')
def index():
    return "Welcome to the CAN API!"


@app.route('/start')
def start_can():
    global bus
    global sender_thread

    if bus is None:
        # Set the CAN interface and baud rate
        can_interface = 'socketcan'  # Use 'socketcan' for Linux SocketCAN interface
        can_channel = 'vcan0'  # Replace with the actual CAN interface channel
        baud_rate = 500000  # Replace with the desired baud rate

        # Create the CAN bus
        bus = can.interface.Bus(channel=can_channel, bustype=can_interface, bitrate=baud_rate)

        with open('sent_messages.csv', 'w', newline='') as csvfile:
            csv_writer = csv.writer(csvfile)
            csv_writer.writerow(['ID', 'Data'])  # Write header to CSV

            sender_thread = Thread(target=periodic_message_sender, args=(bus, csv_writer))
            sender_thread.start()

        return jsonify({'status': 'success', 'message': 'CAN messaging started.'})
    else:
        return jsonify({'status': 'error', 'message': 'CAN messaging already started.'})


@app.route('/stop')
def stop_can():
    global bus
    global sender_thread

    if bus is not None:
        sender_thread.join()
        bus.shutdown()
        bus = None
        sender_thread = None
        return jsonify({'status': 'success', 'message': 'CAN messaging stopped.'})
    else:
        return jsonify({'status': 'error', 'message': 'CAN messaging not started.'})


if __name__ == "__main__":
    app.run(debug=True)


OSError: [Errno 19] No such device
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 2213, in __ca                                                                                        ll__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 2193, in wsgi                                                                                        _app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 2190, in wsgi                                                                                        _app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1486, in full                                                                                        _dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1484, in full                                                                                        _dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1469, in disp                                                                                        atch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File "/home/Machine1/can/con.py", line 56, in start_can
    bus = can.interface.Bus(channel=can_channel, bustype=can_interface, bitrate=                                                                                        baud_rate)
  File "/usr/local/lib/python3.8/dist-packages/can/util.py", line 369, in wrappe                                                                                        r
    return f(*args, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/can/interface.py", line 138, in _                                                                                        _new__
    bus = cls(channel, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/can/interfaces/socketcan/socketca                                                                                        n.py", line 705, in __init__
    bind_socket(self.socket, channel)
  File "/usr/local/lib/python3.8/dist-packages/can/interfaces/socketcan/socketca                                                                                        n.py", line 512, in bind_socket
    sock.bind((channel,))
