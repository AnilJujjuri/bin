import can
from azure.iot.device import IoTHubDeviceClient
from dotenv import load_dotenv
import os
import time

from dotenv import load_dotenv
from pathlib import Path
dotenv_path = Path('config.env')
load_dotenv(dotenv_path=dotenv_path)
def send_to_iot_hub(data):
    # Azure IoT Hub connection string
    device_connection_string ="HostName=EDGTneerTrainingPractice.azure-devices.net;DeviceId=nodered;SharedAccessKey=mOeGufRBpvjmFut51ghJ0gjmWZDR8BHN1WWJtdsrBY4="
    client = IoTHubDeviceClient.create_from_connection_string(device_connection_string)
    client.connect()
    
    # Update the reported properties of the device twin
    twin_patch = {
        "properties": {
            "reported": data
        }
    }
    retry_counter = 0
    while True:
        try:
            client.patch_twin_reported_properties(twin_patch)
            print(twin_patch)
            # Disconnect from Azure IoT Hub
            break
        except Exception as e:
            print("exception caught:", str(e))
            if retry_counter < 3:
                time.sleep(30)  # Wait for 20 seconds between retries
                retry_counter += 1
            else:
                break
    client.disconnect()

def listen_can_interface(channel):
    bus = can.interface.Bus(channel=channel, bustype='socketcan',baudrate=int(os.getenv("baudrate")) if os.getenv("baudrate") else 500000,bitTiming= os.getenv("bit_timing") if os.getenv("bit_timing") else "Custom",message_filtering= True,errorHandling= os.getenv("errorHandling") if os.getenv("errorHandling") else "Automatic")
    bit_timing=(os.getenv("bit_timing"))
    print(f"bit_timing:{bit_timing}")
    while True:
        message = bus.recv()
        # Process the received CAN message
        can_id = message.arbitration_id
        can_data = list(message.data)

        # Convert CAN message to desired format
        # Assuming the desired format is a dictionary with 'can_id' and 'can_data' fields
        data = {
            'can_id': can_id,
            'can_data': can_data
        }

        # Send the data to Azure IoT Hub
        send_to_iot_hub(data)

def main():
    can_interface_channel =  os.getenv("can_interface_channel")
    reported_properties={
        
        "bit_timing": os.getenv("bit_timing") if os.getenv("bit_timing") else None,
        "message_filtering": os.getenv("message_filtering") if os.getenv("message_filtering") else None,
        "error_handling": os.getenv("message_filtering") if os.getenv("message_filtering") else None,
        "baudrate":int(os.getenv("baudrate")) if os.getenv("baudrate") else None
    }

    # Connect to Azure IoT Hub
    device_connection_string ="HostName=EDGTneerTrainingPractice.azure-devices.net;DeviceId=nodered1;SharedAccessKey=drZ5N5meBouUoqankHXxaKv/j5R2r6qadsmatKlPQY4="
    client = IoTHubDeviceClient.create_from_connection_string(device_connection_string)
    client.connect()

    # Get the reported properties from the device twin
    twin = client.get_twin()
    desired_properties = twin["reported"]["can_properties"]["desired"]
    key_values=[]
    # Process the desired properties
    for key, value in desired_properties.items():
        key_values.append(key)
    
    desired_keys=list(reported_properties.keys())
    
    if desired_keys == key_values:
        listen_can_interface(can_interface_channel)
    else:
        
        print("Desired properties do not match the given parameters. Performing alternative action.")

    

    # Disconnect from Azure IoT Hub
    client.disconnect()

if __name__ == '__main__':
    main()


Traceback (most recent call last):
  File "/home/Machine1/connector/new.py", line 96, in <module>
    main()
  File "/home/Machine1/connector/new.py", line 85, in main
    listen_can_interface(can_interface_channel)
  File "/home/Machine1/connector/new.py", line 40, in listen_can_interface
    bus = can.interface.Bus(channel=channel, bustype='socketcan',baudrate=int(os.getenv("BAUD_RATE")) if os.getenv("BAUD_RATE") else 500000,bitTiming= os.getenv("bit_timing") if os.getenv("bit_timing") else "Custom",message_filtering= True,errorHandling= os.getenv("ERROR_HANDLING") if os.getenv("ERROR_HANDLING") else "Automatic")
  File "/home/Machine1/.local/lib/python3.8/site-packages/can/util.py", line 369, in wrapper
    return f(*args, **kwargs)
  File "/home/Machine1/.local/lib/python3.8/site-packages/can/interface.py", line 138, in __new__
    bus = cls(channel, **kwargs)
  File "/home/Machine1/.local/lib/python3.8/site-packages/can/interfaces/socketcan/socketcan.py", line 705, in __init__
    bind_socket(self.socket, channel)
  File "/home/Machine1/.local/lib/python3.8/site-packages/can/interfaces/socketcan/socketcan.py", line 512, in bind_socket
    sock.bind((channel,))
OSError: [Errno 19] No such device
SocketcanBus was not properly shut down
