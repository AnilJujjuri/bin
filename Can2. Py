import can
from azure.iot.device import IoTHubDeviceClient
from dotenv import load_dotenv
import os
import time

load_dotenv()

def send_to_iot_hub(data):
    # Azure IoT Hub connection string
    device_connection_string ="HostName=EDGTneerTrainingPractice.azure-devices.net;DeviceId=nodered;SharedAccessKey=mOeGufRBpvjmFut51ghJ0gjmWZDR8BHN1WWJtdsrBY4="
    client = IoTHubDeviceClient.create_from_connection_string(device_connection_string)
    client.connect()
    
    # Update the reported properties of the device twin
    twin_patch = {
        "properties": {
            "reported": data
        }
    }

    retry_counter = 0
    while True:
        try:
            client.patch_twin_reported_properties(twin_patch)
            print(twin_patch)
            break  # Exit the retry loop on successful update
        except Exception as e:
            print("Exception caught:", str(e))
            # Retry mechanism
            if retry_counter < 3:
                time.sleep(10)  # Wait for 10 seconds between retries
                retry_counter += 1
            else:
                break  # Exit the retry loop after the maximum number of retries

    # Disconnect from Azure IoT Hub
    client.disconnect()

def listen_can_interface(channel):
    bus = can.interface.Bus(channel=channel, bustype='socketcan', bitrate=int(os.getenv("BAUD_RATE")) if os.getenv("BAUD_RATE") else 500000, bitTiming=os.getenv("BIT_TIMING") if os.getenv("BIT_TIMING") else "Custom", message_filtering=True, errorHandling=os.getenv("ERROR_HANDLING") if os.getenv("ERROR_HANDLING") else "Automatic")
    while True:
        try:
            message = bus.recv()
            # Process the received CAN message
            can_id = message.arbitration_id
            can_data = list(message.data)

            # Convert CAN message to desired format
            # Assuming the desired format is a dictionary with 'can_id' and 'can_data' fields
            data = {
                'can_id': can_id,
                'can_data': can_data
            }

            # Send the data to Azure IoT Hub
            send_to_iot_hub(data)
        except Exception as e:
            print("Exception caught:", str(e))
            # Retry mechanism
            time.sleep(10)  # Wait for 10 seconds between retries

def main():
    can_interface_channel = 'vcan0'
    reported_properties = {
        "bit_timing": os.getenv("BIT_TIMING") if os.getenv("BIT_TIMING") else None,
        "message_filtering": os.getenv("MESSAGE_FILTERING") if os.getenv("MESSAGE_FILTERING") else None,
        "error_handling": os.getenv("ERROR_HANDLING") if os.getenv("ERROR_HANDLING") else None,
        "baudrate": int(os.getenv("BAUD_RATE")) if os.getenv("BAUD_RATE") else None
    }

    # Connect to Azure IoT Hub
    device_connection_string = "HostName=EDGTneerTrainingPractice.azure-devices.net;DeviceId=nodered1;SharedAccessKey=drZ5N5meBouUoqankHXxaKv/j5R2r6qadsmatKlPQY4="
    client = IoTHubDeviceClient.create_from_connection_string(device_connection_string)
    client.connect()

    retry_counter = 0
    while True:
        try:
            # Get the reported properties from the device twin
            twin = client.get_twin()
            desired_properties = twin["reported"]["can_properties"]["desired"]
            key_values = []
            # Process the desired properties
            for key, value in desired_properties.items():
                key_values.append(key)
            print(key_values)
            desired_keys = list(reported_properties.keys())
            print(desired_keys)
            if desired_keys == key_values:
                listen_can_interface(can_interface_channel)
                break  # Exit the loop if listen_can_interface completes successfully
            else:
                # Perform some other action if the desired properties don't match
                print("Desired properties do not match the given parameters. Performing alternative action.")
                break  # Exit the loop if alternative action is performed
        except Exception as e:
            print("Exception caught:", str(e))
            # Retry mechanism
            if retry_counter < 3:
                time.sleep(10)  # Wait for 10 seconds between retries
                retry_counter += 1
            else:
                break  # Exit the loop after the maximum number of retries

    # Disconnect from Azure IoT Hub
    client.disconnect()

if __name__ == '__main__':
    main()
