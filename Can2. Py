import can
from azure.iot.device import IoTHubDeviceClient

def send_to_iot_hub(data):
    # Azure IoT Hub connection string
    device_connection_string ="HostName=EDGTneerTrainingPractice.azure-devices.net;DeviceId=nodered;SharedAccessKey=mOeGufRBpvjmFut51ghJ0gjmWZDR8BHN1WWJtdsrBY4="
    client = IoTHubDeviceClient.create_from_connection_string(device_connection_string)
    client.connect()

    # Update the reported properties of the device twin
    twin_patch = {
        "properties": {
            "reported": data
        }
    }
    client.patch_twin_reported_properties(twin_patch)

    # Disconnect from Azure IoT Hub
    client.disconnect()

def listen_can_interface(channel):
    bus = can.interface.Bus(channel=channel, bustype='socketcan')
    while True:
        message = bus.recv()
        # Process the received CAN message
        can_id = message.arbitration_id
        can_data = list(message.data)

        # Convert CAN message to desired format
        # Assuming the desired format is a dictionary with 'can_id' and 'can_data' fields
        data = {
            'can_id': can_id,
            'can_data': can_data
        }

        # Send the data to Azure IoT Hub
        send_to_iot_hub(data)

def main():
    can_interface_channel = 'vcan0'
    reported_properties={
        
        "can_id": 123, # Desired CAN ID
        "baudrate": 500000,  # Desired baudrate
        "bit_timing": 'Standard',  # Desired bit timing
        "message_filtering": True, # Desired message filtering
        "error_handling": 'Automatic'  # Desired error handling
    }

    # Connect to Azure IoT Hub
    device_connection_string ="HostName=EDGTneerTrainingPractice.azure-devices.net;DeviceId=nodered1;SharedAccessKey=drZ5N5meBouUoqankHXxaKv/j5R2r6qadsmatKlPQY4="
    client = IoTHubDeviceClient.create_from_connection_string(device_connection_string)
    client.connect()

    # Get the reported properties from the device twin
    twin = client.get_twin()
    desired_properties = twin["reported"]["properties"]["desired"]
    key_values=[]
# Process the desired properties
    for key, value in desired_properties.items():
        key_values.append(key)
        
    
    print(key_values)
    print(reported_properties.keys())
    if desired_properties.keys() == key_values:
        
            print("hello") 
      
    else:
        # Perform some other action if the desired properties don't match
        print("Desired properties do not match the given parameters. Performing alternative action.",reported_properties.keys())

    

    # Disconnect from Azure IoT Hub
    client.disconnect()

if __name__ == '__main__':
    main()
