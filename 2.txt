import time
from freeopcua import Client, ua

def collect(connection):
    try:
        # Create a client instance
        client = Client(connection['endpointUrl'])
        client.application_uri = "EdgeModbusClient"

        # Connect to the OPC UA server
        client.connect()

        print("Connected!")

        # Create a session
        session = client.create_session()

        print("Session created!")

        # Browse the "RootFolder"
        root_folder = session.get_objects_node()
        references = root_folder.get_children()

        print("References of RootFolder:")
        for reference in references:
            print("   ->", reference.get_display_name().Text)

        # Read variable values
        variable_value1 = session.read_variable("ns=3;s=Scalar_Simulation_Double")
        print("Value 1 =", variable_value1.get_value())

        variable_value2 = session.read("ns=3;s=Scalar_Simulation_String")
        print("Value 2 =", variable_value2)

        # Create a subscription and install a monitored item
        subscription = session.create_subscription(1000, None, 10)
        monitored_item = subscription.create_monitored_item("ns=3;s=Scalar_Simulation_Float", ua.AttributeIds.Value, 100)
        
        def data_change_handler(data):
            print("Value changed:", data.monitored_item.Value.Value)
        
        monitored_item.data_change_notification.add_listener(data_change_handler)

        time.sleep(10)

        print("Now terminating subscription")
        subscription.delete()

        # Finding the nodeId of a node by Browse name
        browse_path = ["RootFolder", "Objects", "Server.ServerStatus.BuildInfo.ProductName"]
        result = session.translate(browse_path)
        product_name_node_id = result.targets[0].TargetId
        print("Product Name nodeId =", product_name_node_id)

        # Close session
        session.close()

        # Disconnect from the OPC UA server
        client.disconnect()
        
        print("Done!")

    except Exception as err:
        print("An error has occurred:", err)

# For testing
if __name__ == "__main__":
    connection = {
        "endpointUrl": "opc.tcp://localhost:26543"
    }
    collect(connection)
