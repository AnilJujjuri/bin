from azure.iot.device import IoTHubModuleClient, Message
from azure.iot.device.transport import Amqp # Change this import to your desired transport
import connector

def on_twin_desired_properties_update(patch):
    print("Getting twin:")
    print(patch)
    if patch:
        devices = patch
        def set_connection_callback():
            connector.set_connection(devices, client, Message)
        module_client.schedule_callback_for_method("setConnection", set_connection_callback)

try:
    transport = Amqp() # Change this to your desired transport
    module_client = IoTHubModuleClient.create_from_environment(transport)
    # Use the following line if you want to use a connection string instead
    # module_client = IoTHubModuleClient.create_from_connection_string(connection_string, transport)
    
    module_client.connect()
    
    print("IoT Hub module client initialized")

    twin_patch_listener = module_client.on_twin_desired_properties_patch_received
    twin_patch_listener.on_twin_desired_properties_patch_received = on_twin_desired_properties_update
    
    # Wait for user to press Ctrl+C to exit
    print("Press Ctrl+C to exit")
    module_client.wait_for_twin_desired_properties_patch_async()
    
except Exception as ex:
    print("Unexpected error:", ex)
    raise
