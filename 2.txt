import time
import json
import asyncio
from azure.iot.device import IoTHubModuleClient
import minimalmodbus

async def collect(edge_client, message_class):
    twin = await get_connection()
    while True:
        try:
            print("Running")
            connection = twin['devices']
            if connection:
                for unitid in connection.items():
                    telemetry = {
                        "thingId": unitid['thingId'],
                        "deviceId": unitid['id'],
                        "message_type": "telemetry",
                        "data": {}
                    }
                    try:
                        rs485 = minimalmodbus.Instrument(unitid['connection']['port'], int(unitid['id']))
                        rs485.serial.baudrate = 9600
                        rs485.serial.bytesize = 8
                        rs485.serial.parity = minimalmodbus.serial.PARITY_NONE
                        rs485.serial.stopbits = 1
                        rs485.mode = minimalmodbus.MODE_RTU


                        for reg in unitid['signals'].items():
                            print(reg['name'])
                            # for address in range(4):
                            for address in range(4):  # Loop through addresses 0 to 3 (4 different addresses)
                                try:
                                    address_int = int(reg['address']) + address - 1  # Adjusted address based on the loop iteration
                                    value = rs485.read_register(address_int, functioncode=3, numberOfDecimals=0)
                                    print(f"Address {address_int}: {value}")
                                    telemetry['data'][f"{reg['name']}_{address_int}"] = value
                                except minimalmodbus.NoResponseError:
                                    print(f"Error reading address {address_int}: No response")
                                except Exception as e:
                                    print(f"Error reading address {address_int}: {e}") 
                        # telemetry['ts'] = str(int(time.time()))
                        print(telemetry)

                        try:
                            output_msg = message_class(json.dumps(telemetry))
                            edge_client.send_output_event('Telemetry', output_msg, print_result_for('Sending received message'))
                        except Exception as e:
                            print("Failed to send data to cloud -", e)

                        # Rest of the code remains unchanged

                    except Exception as e:
                        print("An error has occurred:", e)

                    await timeout(unitid['interval'])

        except Exception as e:
            print("Error in communication/processing:", e)

        await timeout(5000)

async def timeout(ms):
    await asyncio.sleep(ms / 1000)

def print_result_for(op):
    def print_result(err, res):
        if err:
            print(op + ' error:', err)
        if res:
            print(op + ' status:', type(res).__name__)
    return print_result

async def set_connection(twin_obj, edge_client, message_class):
    global twin
    twin = twin_obj
    if twin is None:
        twin = twin_obj
        await asyncio.sleep(1)
        print('Starting Data Acquisition Task')
        await collect(edge_client, message_class)
    else:
        twin = twin_obj
    print("Updated twin")
    print(twin_obj)
    print(twin)

async def get_connection():
    return twin

# Mocking the Message class, you should replace this with the actual implementation from your library
class Message:
    def __init__(self, payload):
        self.payload = payload
