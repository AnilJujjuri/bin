from flask import Flask
from azure.digitaltwins.core import DigitalTwinsClient
from azure.identity import DefaultAzureCredential
import can
import csv

app = Flask(__name__)

# Azure Digital Twins configuration
endpoint = "<your-digital-twins-endpoint>"
credential = DefaultAzureCredential()
client = DigitalTwinsClient(endpoint, credential)

# CAN bus configuration
bus = can.interface.Bus(bustype='socketcan', channel='vcan0', bitrate=500000)

# CSV file configuration
csv_filename = "can_messages.csv"

def process_can_message(message):
    # Process the received CAN message
    # You can perform operations like parsing the message, extracting data, and sending to Azure Digital Twins

    # Example: Print the received CAN message
    print(f"Received CAN message: ID=0x{message.arbitration_id:x}, Data={message.data.hex()}")

    # Example: Send the CAN message data to Azure Digital Twins
    twin_id = "<your-digital-twin-id>"
    property_name = "<your-property-name>"
    property_value = message.data.hex()
    client.update_component_property(twin_id, property_name, property_value)

    # Store the CAN message in a CSV file
    with open(csv_filename, mode='a') as file:
        writer = csv.writer(file)
        writer.writerow([message.arbitration_id, message.data.hex()])

@app.route('/api/listen_can_messages', methods=['GET'])
def listen_can_messages():
    try:
        while True:
            message = bus.recv(timeout=1)
            if message is not None:
                process_can_message(message)
    except Exception as e:
        return f"Exception: {str(e)}"

if __name__ == '__main__':
    app.run()
subprocess.call(['sudo', '/sbin/ip', 'link', 'set', 'can0', 'up', 'type', 'can', 'bitrate', '500000'])
process = subprocess.Popen(['candump', 'can0'], stdout=subprocess.PIPE)

import subprocess
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/api/receive_can_messages', methods=['GET'])
def receive_can_messages():
    received_messages = []

    # Start the vcan0 interface
    subprocess.call(['sudo', '/sbin/ip', 'link', 'set', 'vcan0', 'up', 'type', 'can'])

    # Start the candump process and capture its output
    process = subprocess.Popen(['candump', 'vcan0'], stdout=subprocess.PIPE)

    # Process the candump output
    for line in iter(process.stdout.readline, b''):
        # Process each line of the candump output as needed
        received_messages.append(line.strip().decode())  # Example: Add the received CAN message to the list

    return jsonify({'messages': received_messages})

if __name__ == '__main__':
    app.run()
