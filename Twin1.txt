import logging
import time
from azure.iot.device import IoTHubModuleClient
import can

logger = logging.getLogger(__name__)

class CommunicationModule:
    def __init__(self, connection_string=None, can_interface=None, **kwargs):
        logger.info("Inside Communication module constructor")
        self.connection_string = connection_string
        self.can_interface = can_interface
        self.client = None
        self.properties = {"reported": {}, "desired": {}}
        self.on_property_update_callback = kwargs.get("on_property_update")
        self.methods = kwargs.get("methods", {})

    def connect(self):
        logger.info(f"Connecting: {self.connection_string}")
        if self.connection_string:
            self.client = IoTHubModuleClient.create_from_connection_string(self.connection_string)
            logger.info(f"self.client in connect if: {self.client}")
        else:
            self.client = IoTHubModuleClient.create_from_edge_environment()
            logger.info(f"self.client in connect else: {self.client}")
        self.client.on_twin_desired_properties_patch_received = self.on_property_update
        self.client.connect()

    def disconnect(self):
        if self.client:
            self.client.shutdown()

    def on_property_update(self, patch):
        self.properties["desired"].update(patch)
        if self.on_property_update_callback:
            self.on_property_update_callback(self.properties["desired"])

    def update_property(self, reported_properties):
        twin_patch = {"reported": reported_properties}
        self.client.patch_twin_reported_properties(twin_patch)

    def run(self):
        # Initialize CAN communication
        bus = can.interface.Bus(channel=self.can_interface, bustype="socketcan_native")

        while True:
            # Receive CAN messages
            can_messages = bus.recv()

            # Process CAN messages
            for message in can_messages:
                # Process the received CAN message and extract the desired data
                data = process_can_message(message)

                # Update the desired properties with the extracted data
                self.properties["desired"].update(data)
                if self.on_property_update_callback:
                    self.on_property_update_callback(self.properties["desired"])

                # Update the reported properties in the device twin
                self.update_property(data)

    def __enter__(self):
        self.connect()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.disconnect()

def process_can_message(message):
    # Process and extract desired data from the CAN message
    data = {
        "can_id": message.arbitration_id,
        "can_data": message.data,
        "can_timestamp": message.timestamp,
    }
    return data

if __name__ == "__main__":
    # Azure IoT Hub connection string
    connection_string = "YOUR_CONNECTION_STRING"

    # CAN interface name
    can_interface = "vcan0"

    # Instantiate the CommunicationModule
    with CommunicationModule(connection_string=connection_string, can_interface=can_interface) as module:
        # Start the communication module thread
        module.start()

        # Keep the program running to continue listening to CAN messages and updating the device twin
        while True:
            time.sleep(1)
