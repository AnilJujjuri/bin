from flask import Flask
from azure.digitaltwins.core import DigitalTwinsClient
from azure.identity import DefaultAzureCredential
import can

app = Flask(__name__)

# Azure Digital Twins configuration
endpoint = "<your-digital-twins-endpoint>"
credential = DefaultAzureCredential()
client = DigitalTwinsClient(endpoint, credential)

# CAN bus configuration
bus = can.interface.Bus(bustype='socketcan', channel='vcan0', bitrate=500000)

def process_can_message(message):
    # Process the received CAN message
    # You can perform operations like parsing the message, extracting data, and sending to Azure Digital Twins

    # Example: Print the received CAN message
    print(f"Received CAN message: ID=0x{message.arbitration_id:x}, Data={message.data.hex()}")

    # Example: Send the CAN message data to Azure Digital Twins
    twin_id = "<your-digital-twin-id>"
    property_name = "<your-property-name>"
    property_value = message.data.hex()
    client.update_component_property(twin_id, property_name, property_value)

@app.route('/api/listen_can_messages', methods=['GET'])
def listen_can_messages():
    try:
        while True:
            message = bus.recv(timeout=1)
            if message is not None:
                process_can_message(message)
    except Exception as e:
        return f"Exception: {str(e)}"

if __name__ == '__main__':
    app.run()
