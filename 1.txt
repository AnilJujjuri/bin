from azure.iot.device import IoTHubDeviceClient
import can
import time

def send_can_message(bus, can_id, data):
    message = can.Message(arbitration_id=can_id, data=data)
    bus.send(message)

class CanController:
    def __init__(self, bus):
        self.bus = bus

    def send_can_message(self, can_id, can_data):
        send_can_message(self.bus, can_id, can_data)

def handle_device_twin_update(twin, can_controller):
    reported_properties = twin.get("reported", {})

    can_id = reported_properties.get("can_id", 123)  # Default CAN ID if not specified
    can_data = []

    for key, value in reported_properties.items():
        if key == "can_id":
            continue  # Skip the can_id property

        if isinstance(value, int):
            byte_value = value % 256
        elif isinstance(value, float):
            byte_value = int(value) % 256
        elif isinstance(value, str):
            try:
                byte_value = int(value) % 256
            except ValueError:
                try:
                    byte_value = int(float(value)) % 256
                except ValueError:
                    continue  # Skip this key-value pair if conversion is not possible
        else:
            continue  # Skip unsupported data types

        can_data.append(byte_value)

    if can_data:
        can_controller.send_can_message(can_id, can_data)

def main():
    bus = can.interface.Bus(channel='vcan0', bustype='socketcan')

    device_connection_string = "YOUR_DEVICE_CONNECTION_STRING"
    client = IoTHubDeviceClient.create_from_connection_string(device_connection_string)

    client.connect()
    can_controller = CanController(bus)

    retry_counter = 0
    max_retries = 3

    while True:
        try:
            twin = client.get_twin()
            handle_device_twin_update(twin, can_controller)

            if retry_counter < max_retries:
                time.sleep(10)  # Wait for 10 seconds between retries
                retry_counter += 1
            else:
                break  # Disconnect after the maximum number of retries
        except Exception as e:
            print("Exception caught:", str(e))
            continue

    client.disconnect()

if __name__ == '__main__':
    main()
