from opcua import Client, ua

def subscribe_to_values(client):
    # Create a subscription polling every 2s with a callback
    subscription = client.create_subscription(2000, ua.SubscriptionDiagnosticsDataType(), publishing_enabled=True)
    
    def data_change_handler(_, data_values, __):
        print("Data change from server:")
        for data_value in data_values:
            print_value(data_value)

    subscription.subscribe_data_change(data_change_handler)

    # Create some monitored items
    items_to_create = [ua.ReadValueId(node_id=ua.NodeId(3, v), attribute_id=ua.AttributeIds.Value) for v in [1003, 1008, 1009, 1010]]
    monitored_items = subscription.create_monitored_items(ua.TimestampsToReturn.Both, items_to_create)
    
    return subscription

def print_value(data_value):
    node_id = data_value.NodeId
    value = data_value.Value.Value
    print(f"Item \"{node_id}\", Value = {value}")

def main():
    client = Client("opc.tcp://MYTSL02946.lnties.com:53530/OPCUA/SimulationServer")
    client.set_security_string("None")
    
    try:
        client.connect()
        print("Client connected")

        session = client.create_session()
        print("Session created")

        subscription = subscribe_to_values(session)
        print("Subscribed")

        session.activate_subscription(subscription)
        client.disconnect()
        print("Client disconnected")

    except Exception as e:
        print("Error:", e)

if __name__ == "__main__":
    main()
