from azure.iot.device import IoTHubDeviceClient
import can
import time

def send_can_message(bus, can_id, data):
    message = can.Message(arbitration_id=can_id, data=data)
    bus.send(message)

def convert_telemetry_to_candump(telemetry_data):
    candump = ""
    can_data = []
    can_id = 1001  # Default value

    for key, value in telemetry_data.items():
        if key == "can_id":
            if isinstance(value, int):
                can_id = value
            elif isinstance(value, str) and value.isdigit():
                can_id = int(value)
            continue

        if isinstance(value, int):
            byte_value = value % 256
        elif isinstance(value, float):
            byte_value = int(value) % 256
        elif isinstance(value, str):
            try:
                byte_value = int(value) % 256
            except ValueError:
                try:
                    byte_value = int(float(value)) % 256
                except ValueError:
                    continue  # Skip this key-value pair if conversion is not possible
        else:
            continue  # Skip unsupported data types

        can_data.append(byte_value)
        candump += f"{key}_{byte_value}_"

    return candump.rstrip("_"), can_data, can_id

class CanController:
    def __init__(self, bus):
        self.bus = bus

    def send_can_message(self, can_id, can_data):
        send_can_message(self.bus, can_id, can_data)

def handle_device_twin_update(patch, can_controller):
    desired_properties = patch.get("desired", {})
    can_device_id = patch.get("can_device_id", "")

    if desired_properties and can_device_id:
        telemetry_data = desired_properties.get(can_device_id)
        if isinstance(telemetry_data, dict):
            candump, can_data, can_id = convert_telemetry_to_candump(telemetry_data)
            if candump is not None and can_data is not None:
                can_controller.send_can_message(can_id, can_data)

def main():
    bus = can.interface.Bus(channel='vcan0', bustype='socketcan')

    device_connection_string = "HostName=<your-iothub-hostname>;DeviceId=<your-device-id>;SharedAccessKey=<your-shared-access-key>"
    client = IoTHubDeviceClient.create_from_connection_string(device_connection_string)

    client.connect()
    can_controller = CanController(bus)

    last_processed_version = None

    while True:
        try:
            patch = client.receive_twin_desired_properties_patch()
            if patch and patch.get("$version") != last_processed_version:
                last_processed_version = patch.get("$version")
                handle_device_twin_update(patch, can_controller)
        except Exception as e:
            print("Exception caught:", str(e))
            continue

        time.sleep(1)

    client.disconnect()

if __name__ == '__main__':
    main()
