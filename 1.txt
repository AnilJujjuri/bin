from azure.iot.device import IoTHubDeviceClient
import can
import time

def send_can_message(bus, can_id, data):
    message = can.Message(arbitration_id=can_id, data=data)
    bus.send(message)

def receive_can_message(bus):
    message = bus.recv()
    return message

class CanController:
    def __init__(self, bus):
        self.last_messages = {}
        self.bus = bus

    def send_can_message(self, can_id, can_data):
        message_key = f"{can_id}_{can_data}"
        if message_key not in self.last_messages:
            self.last_messages[message_key] = True
            send_can_message(self.bus, can_id, can_data)

def handle_device_twin_update(twin, can_controller):
    transmission_data = twin.get("reported", {}).get("transmission_data")
    if transmission_data and isinstance(transmission_data, dict):
        can_id = transmission_data.get("can_id", 1001)  # Default CAN ID
        can_data = transmission_data.get("can_data", [])
        can_controller.send_can_message(can_id, can_data)

def main():
    bus = can.interface.Bus(channel='vcan0', bustype='socketcan')

    device_connection_string = "HostName=EDGTneerTrainingPractice.azure-devices.net;DeviceId=nodered;SharedAccessKey=mOeGufRBpvjmFut51ghJ0gjmWZDR8BHN1WWJtdsrBY4="
    client = IoTHubDeviceClient.create_from_connection_string(device_connection_string)

    client.connect()
    can_controller = CanController(bus)
    print("Started listening for Device Twin updates...")
    while True:
        try:
            twin = client.get_twin()
            handle_device_twin_update(twin, can_controller)
            can_message = receive_can_message(bus)
            if can_message:
                can_controller.send_can_message(can_message.arbitration_id, list(can_message.data))
                print(f"Received CAN Message - ID: {can_message.arbitration_id}, Data: {list(can_message.data)}")
        except Exception as e:
            print("Exception caught:", str(e))
            continue

    client.disconnect()
    print("Stopped listening for Device Twin updates.")

if __name__ == '__main__':
    print("Starting CAN Data Logger...")
    main()
