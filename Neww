from flask import Flask, request, jsonify
import can
from threading import Thread

app = Flask(__name__)
bus = None
received_messages = []

def send_can_message(message_id, message_data):
    message = can.Message(
        arbitration_id=int(message_id, 16),
        data=bytes.fromhex(message_data),
        is_extended_id=False
    )
    bus.send(message)
    print(f"Sent message: ID=0x{message_id}, Data={message_data}")

def receive_can_messages():
    try:
        while True:
            message = bus.recv(timeout=1)
            if message is not None:
                print(f"Received message: ID=0x{message.arbitration_id:x}, Data={message.data}")
                received_messages.append({
                    'id': message.arbitration_id,
                    'data': message.data.hex(),
                })
    except Exception as e:
        print(f"Exception: {str(e)}")

@app.route('/api/send_message', methods=['POST'])
def api_send_message():
    message_id = request.form.get('id')
    message_data = request.form.get('data')
    send_can_message(message_id, message_data)
    return 'Message sent'

@app.route('/api/receive_messages', methods=['GET'])
def api_receive_messages():
    return jsonify({'messages': received_messages})

@app.route('/api/start', methods=['POST'])
def api_start():
    global bus
    if bus is None:
        bus = can.interface.Bus(bustype='virtual', channel='vcan0')
        receiver_thread = Thread(target=receive_can_messages)
        receiver_thread.start()
        return 'API started'
    else:
        return 'API is already running'

@app.route('/api/stop', methods=['POST'])
def api_stop():
    global bus
    if bus is not None:
        bus.shutdown()
        bus = None
        return 'API stopped'
    else:
        return 'API is not running'

if __name__ == '__main__':
    app.run()
