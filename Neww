# Standard Library
import logging
import threading
import time

# Third Party Library
from azure.iot.device import IoTHubModuleClient

logger = logging.getLogger(__name__)


class CommunicationModule(threading.Thread):
    def __init__(self, connection_string=None, **kwargs):
        logger.info("Inside Communication module constructor")
        threading.Thread.__init__(self)
        self.connection_string = connection_string
        self.client = None
        self.on_property_update_callback = kwargs.get("on_property_update")
        self.properties = {"reported": {}, "desired": {}}
        self.methods = kwargs.get("methods", {})
        self.daemon = True

    def connect(self):
        logger.info(f"connecting: {self.connection_string}")
        if self.connection_string:
            self.client = IoTHubModuleClient.create_from_connection_string(self.connection_string)
            logger.info(f"self.client in connect if: {self.client}")
        else:
            self.client = IoTHubModuleClient.create_from_edge_environment()
            logger.info(f"self.client in connect else: {self.client}")
        self.client.on_twin_desired_properties_patch_received = self.on_property_update
        self.start(debug=True)

    def run(self):
        while True:
            # Do something
            time.sleep(1)

    def disconnect(self):
        if self.client:
            self.client.shutdown()

    def on_property_update(self, data):
        """
        Desired Property update from the server
        """
        self.properties["desired"].update(data)
        if self.on_property_update_callback:
            self.on_property_update_callback(self.properties["desired"])

    def update_property(self, data):
        """
        Reported Property to be updated from device
        """
        return self.client.patch_twin_reported_properties(data)

    def get_properties(self):
        self.properties = self.client.get_twin()
        return self.properties

    def __enter__(self):
        self.connect()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.disconnect(debug=True)
